-- import Mathlib
import Kura.Graph
import Kura.Operation.Subgraph
import Kura.WList.Defs
import Kura.WList.Ops
import Kura.WList.Sublist
import Kura.WList.Cycle
import Kura.Walk.Basic
import Kura.Walk.Cycle
import Kura.Walk.Path
import Kura.Connected
import Kura.Operation.Map
import Kura.Operation.Hom
import Kura.Operation.MapHom
import Kura.Operation.Minor
import Kura.Operation.Minor2
import Kura.ST.Separator
-- import Kura.ST.Ensemble
-- import Kura.ST.Walk
-- import Kura.ST.Menger

-- This module serves as the root of the `Kura` library.
-- Import modules here that should be built as part of the library.

-- Graph.lean
#check finsum_mem_const
#check Graph
#check Graph.Finite
#check Graph.toMultiset
#check Graph.toSym2
#check Graph.IncFun
#check Graph.Inc
#check Graph.IsLoopAt
#check Graph.IsNonloopAt
#check Graph.Inc₂.symm
#check Graph.Inc₂.vx_mem_left
#check Graph.Inc₂.vx_mem_right
#check Graph.Inc₂.edge_mem
#check Graph.Inc₂.exists_vx_inc₂
#check Graph.Inc₂.left_or_of_inc₂
#check Graph.Inc₂.right_or_of_inc₂
#check Graph.Inc₂.comm
#check Graph.Inc₂.inc₂_iff_eq_left
#check Graph.Inc₂.inc₂_iff_eq_right
#check Graph.Inc₂.eq_or_eq_of_inc₂
#check Graph.not_inc₂_of_not_edge_mem
#check Graph.Inc₂.pair_eq
#check Graph.Inc₂.sym2_eq_iff
#check Graph.Inc.vx_mem
#check Graph.Inc.edge_mem
#check Graph.Inc.exists_vx_inc
#check Graph.Inc.not_hypergraph
#check Graph.not_inc_of_not_vx_mem
#check Graph.not_inc_of_not_edge_mem
#check Graph.exists_vertex_inc
#check Graph.toMultiset.vx_mem
#check Graph.toMultiset.edge_mem
#check Graph.toMultiset.card_eq_two
#check Graph.toMultiset.eq_zero
#check Graph.toMultiset.edge_mem_of_mem
#check Graph.toMultiset_eq_zero_iff
#check Graph.toMultiset_card_eq_two_iff
#check Graph.toMultiset_card_or
#check Graph.toSym2.vx_mem
#check Graph.toSym2.eq_iff_inc₂
#check Graph.IncFun.sum_eq
#check Graph.IncFun.vx_mem
#check Graph.IncFun.edge_mem
#check Graph.IncFun.eq_zero_of_edge_not_mem
#check Graph.IncFun.eq_zero_of_vertex_not_mem
#check Graph.incFun_le_two
#check Graph.incFun_eq_zero_or_one_or_two
#check Graph.inc_iff_exists_inc₂
#check Graph.Inc₂.inc_left
#check Graph.Inc₂.inc_right
#check Graph.Inc₂.eq_of_inc
#check Graph.inc₂_iff_inc_and_loop
#check Graph.Inc₂.inc_iff
#check Graph.Inc₂.forall_inc_iff
#check Graph.forall_inc_iff
#check Graph.toMultiset.Inc₂_of_edge_mem
#check Graph.Inc₂.toMultiset
#check Graph.inc₂_iff_toMultiset
#check Graph.inc_iff_mem_toMultiset
#check Graph.toMultiset_count
#check Graph.incFun_ne_zero
#check Graph.incFun_eq_zero
#check Graph.Inc.iff_mem_support
#check Graph.IsLoopAt.vx_mem
#check Graph.IsLoopAt.edge_mem
#check Graph.IsNonloopAt.vx_mem
#check Graph.IsNonloopAt.edge_mem
#check Graph.IsLoopAt.inc
#check Graph.IsNonloopAt.inc
#check Graph.inc₂_eq_iff_isLoopAt
#check Graph.Inc₂.IsLoopAt_iff_eq
#check Graph.inc_and_not_isLoopAt_iff_isNonloopAt
#check Graph.toMultiset_eq_replicate_two_iff_isLoopAt
#check Graph.incFun_eq_two_iff_isLoopAt
#check Graph.incFun_eq_one_iff_isNonloopAt
#check Graph.inc_iff_isLoopAt_or_isNonloopAt
#check Graph.isLoopAt_iff
#check Graph.IsLoopAt.eq_of_inc
#check Graph.IsNonloopAt.not_isLoopAt
#check Graph.IsLoopAt.not_isNonloopAt
#check Graph.IsNonloopAt.exists_inc_ne
#check Graph.isNonloopAt_iff
#check Graph.Adj
#check Graph.Adj.comm
#check Graph.Adj.symm
#check Graph.Adj.mem_left
#check Graph.Adj.mem_right
#check Graph.not_adj_of_not_mem_left
#check Graph.not_adj_of_not_mem_right
#check Graph.Inc₂.Adj
#check Graph.edgeNhd
#check Graph.vxNhd
#check Graph.inc₂_eq_inc₂_iff_inc_eq_inc
#check Graph.inc_eq_inc_iff_incFun_eq_incFun
#check Graph.incFun_eq_incFun_iff_toMultiset_eq_toMultiset
#check Graph.toSym2_eq_toSym2_iff_inc₂_eq_inc₂
#check Graph.edge_subset_of_inc₂_le_inc₂
#check Graph.inc₂_eq_inc₂_of_edge_mem_and_inc₂_le_inc₂
#check Graph.inc_eq_inc
#check Graph.incFun_eq_incFun
#check Graph.toMultiset_eq_toMultiset
#check Graph.toSym2_eq_toSym2
#check Graph.ext_inc₂
#check Graph.ext_inc₂_le
#check Graph.ext_inc
#check Graph.ext_incFun
#check Graph.ext_toMultiset
#check Graph.ext_toSym2
#check Graph.IncFun_eq_zero_of_E_empty
#check Graph.not_inc_of_E_empty
#check Graph.not_inc₂_of_E_empty
#check Graph.not_adj_of_E_empty
#check Graph.Adj.iff_inc₂_of_E_singleton
#check Graph.Adj.iff_inc₂_of_E_subsingleton
#check Graph.Isolated
#check Graph.Isolated.not_adj_left
#check Graph.Isolated.not_adj_right
#check Graph.Isolated.not_inc₂_left
#check Graph.Isolated.not_inc₂_right
#check Graph.Isolated.not_inc_of_E_empty
#check Graph.IncidenceEdges
#check Graph.IncidentVertices
-- Le.lean
#check Graph.instPartialOrderGraph
#check Graph.vx_subset_of_le
#check Graph.mem_of_le
#check Graph.edge_subset_of_le
#check Graph.edge_mem_of_le
#check Graph.Inc_eq_Inc_of_le
#check Graph.incFun_eq_incFun_of_le
#check Graph.Inc₂_eq_Inc₂_of_le
#check Graph.le_of_exist_mutual_le
#check Graph.le_iff_inc₂
#check Graph.Inc₂.of_le
#check Graph.Inc₂.le_of_le
#check Graph.inc₂_iff_inc₂_edge_mem_of_le
#check Graph.Inc.le
#check Graph.Inc.le_of_le
#check Graph.IsLoopAt_iff_IsLoopAt_of_edge_mem_le
#check Graph.IsLoopAt.le
#check Graph.IsNonloopAt_iff_IsNonloopAt_of_edge_mem_le
#check Graph.IsNonloopAt.le
#check Graph.Adj.of_le
#check Graph.le_iff_inc
#check Graph.finite_of_le_finite
#check Graph.vx_ncard_le_of_le
#check Graph.edge_ncard_le_of_le
#check Graph.instOrderBotGraph
#check Graph.instInhabitedGraph
#check Graph.bot_V
#check Graph.bot_E
#check Graph.bot_incFun
#check Graph.bot_inc
#check Graph.bot_inc₂
#check Graph.bot_adj
#check Graph.vx_empty_iff_eq_bot
#check Graph.Isolated.bot
#check Graph.Isolated.edgeless
#check Graph.vx_disjoint_of_disjoint
#check Graph.singleEdge_le_iff
#check Graph.Compatible
#check Graph.Compatible.symm
#check Graph.compatible_of_le_le
#check Graph.compatible_of_edge_disjoint
#check Graph.union
#check Graph.Union
#check Graph.union_vxSet
#check Graph.union_edgeSet
#check Graph.union_inc₂_iff
#check Graph.union_le
#check Graph.left_le_union
#check Graph.Compatible.union_inc₂_iff
#check Graph.Compatible.union_comm
#check Graph.Compatible.right_le_union
#check Graph.Compatible.union_le_iff
#check Graph.singleEdge_compatible_iff
#check Graph.inter
#check Graph.SemilatticeInf
#check Graph.inter_vxSet
#check Graph.inter_edgeSet
#check Graph.compatible_iff_inter_edge_eq_inter
#check Graph.GraphSeparation
#check Graph.GraphSeparation.cut
#check Graph.GraphSeparation.enorder
#check Graph.GraphSeparation.order
-- Constructor.lean
#check Graph.ofInc₂
#check Graph.ofInc₂_V
#check Graph.ofInc₂_E
#check Graph.ofInc₂_inc₂
#check Graph.ofInc₂_inc
#check Graph.ofInc
#check Graph.ofInc_V
#check Graph.ofInc_E
#check Graph.ofInc_inc
#check Graph.oftoMultiset
#check Graph.oftoMultiset_V
#check Graph.oftoMultiset_E
#check Graph.oftoMultiset_toMultiset
#check Graph.ofIncFun
#check Graph.ofIncFun_V
#check Graph.ofIncFun_E
#check Graph.ofIncFun_incFun
#check Graph.oftoSym2
#check Graph.oftoSym2_V
#check Graph.oftoSym2_E
#check Graph.oftoSym2_tosym2
#check Graph.Edgeless
#check Graph.Edgeless.V
#check Graph.Edgeless.E
#check Graph.Edgeless.incFun
#check Graph.Edgeless.Inc
#check Graph.Edgeless.Inc₂
#check Graph.Edgeless.Adj
#check Graph.edge_empty_iff_eq_Edgeless
#check Graph.singleEdge
#check Graph.singleEdge_inc₂_iff
#check Graph.ofSimpleGraph
-- Operation.Subgraph.lean
#check Graph.induce
#check Graph.induce_V
#check Graph.induce_E
#check Graph.induce_E_eq_inter
#check Graph.induce_E_subset
#check Graph.induce_inc₂_iff
#check Graph.Inc₂.of_inc₂_induce
#check Graph.induce_inc_iff
#check Graph.Inc.of_Inc_induce
#check Graph.vxDel
#check Graph.instHSub
#check Graph.vxDel_notation
#check Graph.vxDel_V
#check Graph.vxDel_V_subset
#check Graph.vxDel_E
#check Graph.vxDel_E_subset
#check Graph.vxDel_inc₂_iff
#check Graph.Inc₂.of_inc₂_vxDel
#check Graph.vxDel_inc_iff
#check Graph.Inc.of_Inc_vxDel
#check Graph.restrict
#check Graph.restrict_V
#check Graph.restrict_E
#check Graph.restrict_E_subset
#check Graph.restrict_inc
#check Graph.mem_restrict_E_iff
#check Graph.restrict_inc₂_iff
#check Graph.edgeDel
#check Graph.edgeDel_notation
#check Graph.edgeDel_V
#check Graph.edgeDel_E
#check Graph.edgeDel_E_subset
#check Graph.edgeDel_inc
#check Graph.mem_edgeDel_E_iff
#check Graph.edgeDel_inc₂_iff
#check Graph.induce_isLoopAt_iff
#check Graph.IsLoopAt.of_IsLoopAt_induce
#check Graph.induce_le
#check Graph.induce_le_induce_of_subset
#check Graph.induce_le_induce
#check Graph.induce_eq_induce
#check Graph.induce_eq_self_iff
#check Graph.induce_V_eq_self
#check Graph.induce_empty_eq_bot
#check Graph.induce_mono
#check Graph.induce_monotone
#check Graph.induce_idem
#check Graph.mem_induce_V_iff
#check Graph.Inc₂.iff_induce_pair
#check Graph.Adj.of_Adj_induce
#check Graph.reflAdj.of_reflAdj_induce_ne
#check Graph.reflAdj.of_reflAdj_induce_mem
#check Graph.reflAdj.of_reflAdj_induce_subset
#check Graph.Connected.of_Connected_induce_ne
#check Graph.Connected.of_Connected_induce_mem
#check Graph.Connected.of_Connected_induce_subset
#check Graph.SetConnected.of_induce
#check Graph.SetConnected.of_induce_of_disjoint
#check Graph.Inc₂.induce_of_mem
#check Graph.Inc.induce_of_mem
#check Graph.Adj.induce_of_mem
#check Graph.reflAdj.induce_of_mem
#check Graph.Connected.induce_of_mem
#check Graph.Isolated.induce_of_not_mem
#check Graph.finite_of_finite_induce
#check Graph.vx_ncard_le_of_induce
#check Graph.edge_ncard_le_of_induce
#check Graph.vxDel_isLoopAt_iff
#check Graph.IsLoopAt.of_IsLoopAt_vxDel
#check Graph.vxDel_le_vxDel_of_subset
#check Graph.vxDel_le_vxDel
#check Graph.vxDel_le_vxDel_iff'
#check Graph.vxDel_eq_vxDel_iff
#check Graph.vxDel_eq_vxDel_iff'
#check Graph.vxDel_le
#check Graph.vxDel_eq_self_iff
#check Graph.vxDel_empty_eq_self
#check Graph.vxDel_V_eq_bot
#check Graph.vxDel_univ_eq_bot
#check Graph.vxDel_anti
#check Graph.vxDel_antitone
#check Graph.vxDel_idem
#check Graph.vxDel_vxDel_eq_vxDel_left_iff
#check Graph.Adj.of_Adj_vxDel
#check Graph.reflAdj.of_reflAdj_vxDel
#check Graph.Connected.of_Connected_vxDel
#check Graph.SetConnected.of_vxDel
#check Graph.Inc₂.vxDel_of_mem
#check Graph.Inc.vxDel_of_mem
#check Graph.Adj.vxDel_of_mem
#check Graph.reflAdj.vxDel_of_mem
#check Graph.Connected.vxDel_of_mem
#check Graph.restrict_le
#check Graph.restrict_le_restrict_of_le
#check Graph.restrict_le_restrict_iff
#check Graph.restrict_eq_restrict_iff
#check Graph.restrict_eq_self_iff
#check Graph.restrict_univ_eq_self
#check Graph.restrict_E_eq_self
#check Graph.restrict_monotone
#check Graph.restrict_mono
#check Graph.restrict_restrict_eq_restrict_inter
#check Graph.restrict_idem
#check Graph.Adj.of_Adj_restrict
#check Graph.reflAdj.restrict_of_le_reflAdj_restrict
#check Graph.Connected.of_Connected_restrict
#check Graph.Connected.restrict_of_le_inter_subset
#check Graph.restrict_Connected_iff_restrict_Connected_of_le
#check Graph.Inc₂.restrict_of_mem
#check Graph.Inc.restrict_of_mem
#check Graph.finite_of_finite_restrict
#check Graph.vx_ncard_le_of_restrict
#check Graph.edge_ncard_le_of_restrict
#check Graph.restrict_E_subset_singleton
#check Graph.edgeDel_le
#check Graph.edgeDel_le_edgeDel_of_subset
#check Graph.edgeDel_le_edgeDel
#check Graph.edgeDel_eq_edgeDel_iff
#check Graph.edgeDel_eq_self_iff
#check Graph.edgeDel_univ_eq_self
#check Graph.edgeDel_E_eq_self
#check Graph.edgeDel_empty_eq_self
#check Graph.edgeDel_antitone
#check Graph.edgeDel_anti
#check Graph.edgeDel_edgeDel_eq_edgeDel_union
#check Graph.edgeDel_idem
#check Graph.edgeDel_inc₂
#check Graph.Adj.of_Adj_edgeDel
#check Graph.Connected.of_Connected_edgeDel
#check Graph.SetConnected.of_Connected_edgeDel
#check Graph.Inc₂.edgeDel_of_mem
#check Graph.Inc.edgeDel_of_mem
#check Graph.finite_of_finite_edgeDel
#check Graph.vx_ncard_le_of_edgeDel
#check Graph.edge_ncard_le_of_edgeDel
#check Graph.EdgeDel_singleton_inc₂_iff_inc₂_of_ne
#check Graph.induce_induce_eq_induce_restrict'
#check Graph.induce_induce_eq_induce_restrict
#check Graph.induce_induce_eq_induce_left_iff
#check Graph.induce_induce_eq_induce_right
#check Graph.vxDel_vxDel_eq_vxDel_union
#check Graph.vxDel_comm
#check Graph.induce_restrict_eq_restrict_induce
#check Graph.restrict_induce_eq_induce
#check Graph.vxDel_induce_eq
#check Graph.induce_vxDel_eq_induce
#check Graph.vxDel_restrict_eq_restrict_vxDel
#check Graph.vxDel_edgeDel_comm
#check Graph.restrict_induce_le
#check Graph.exists_compatible_of_le
#check Graph.exists_subgraph_of_le
#check Graph.le_iff_of_mutual_le
-- Operation.Hom.lean
#check Graph.HomSys
#check Graph.HomSys.ofVxFun
#check Graph.HomSys.IsHomOn
#check Graph.HasHom
#check Graph.HomSys.IsEmbOn
#check Graph.HasEmb
#check Graph.HasIsom.toHasEmb
#check Graph.HomSys.IsIsomOn
#check Graph.HasIsom
#check Graph.HasIsom.toHasHom
#check Graph.HomSys.id
#check Graph.HomSys.IsHomOn.id
#check Graph.HomSys.IsEmbOn.id
#check Graph.HomSys.IsIsomOn.id
#check Graph.HomSys.comp
#check Graph.HomSys.IsHomOn.comp
#check Graph.HomSys.IsEmbOn.comp
#check Graph.HomSys.IsIsomOn.comp
#check Graph.HomSys.IsHomOn.le
#check Graph.HomSys.IsEmbOn.le
#check Graph.HasEmb.bot
#check Graph.HasHom.edgeless
#check Graph.HasHom.rfl
#check Graph.HasHom.trans
#check Graph.IsCore
#check Graph.HasEmb.rfl
#check Graph.HasEmb.trans
#check Graph.HasIsom.rfl
#check Graph.HasIsom.trans
#check Graph.IsIsomOn.inc₂
#check Graph.Inc₂.isIsomOn
#check Graph.HomSys.image
#check Graph.HomSys.image_V
#check Graph.HomSys.image_E
#check Graph.HomSys.image_inc
#check Graph.HomSys.image_le
#check Graph.HomSys.image_isIsomOn
-- Operation.Map.lean
#check Graph.vxMap_aux
#check Graph.vxMap
#check Graph.vxMap.V
#check Graph.vxMap.E
#check Graph.vxMap_inc_iff
#check Graph.vxMap_toMultiset_eq_map_toMultiset
#check Graph.Inc₂.vxMap_of_inc₂
#check Graph.vxMap_inc₂_iff
#check Graph.edgePreimg
#check Graph.edgePreimg.V
#check Graph.edgePreimg.E
#check Graph.edgePreimg.Inc
#check Graph.edgePreimg.Inc₂
-- Operation.MapHom.lean
#check Graph.vxMap.IsHomOn
#check Graph.vxMap.HasHom
#check Graph.vxMap.IsIsomOn
#check Graph.vxMap.HasIsom
#check Graph.edgePreimg.HomSys
#check Graph.edgePreimg.HomSys.IsHomOn
#check Graph.edgePreimg.HasHom
#check Graph.edgePreimg.HomSys'
#check Graph.edgePreimg.HomSys.IsEmbOn
#check Graph.edgePreimg.HasEmb
-- Operation.Minor.lean
#check Graph.Contract
#check Graph.Contract.V
#check Graph.Contract.E
#check Graph.Contract.E_subset
#check Graph.Contract.Inc
#check Graph.Contract.inc₂_of_inc₂
#check Graph.Contract.Inc₂
#check Graph.Contract.inc₂
#check Graph.Contract.ValidIn
#check Graph.Contract.map_mem
#check Graph.Contract.map_eq_of_reflAdj
#check Graph.Contract.ValidIn.of_inter_eq
#check Graph.Contract.toFun_eq_of_inter_eq_fixed_eq
#check Graph.Contract.toFun_eq_of_inter_eq_fixed_eq'
#check Graph.Contract.ValidIn.le
#check Graph.Contract.exists_rep_of_contractSet
#check Graph.Contract.contract_eq_contract_iff
#check Graph.Contract.contract_restrict_eq_restrict_contract
#check Graph.Contract.contract_vxDel_eq_vxDel_contract
#check Graph.Contract.instFinite
#check Graph.Contract.reflAdj
#check Graph.Contract.connected_of_map_reflAdj
#check Graph.Contract.connnected_of_map_connected
#check Graph.Contract.connected
#check Graph.Contract.connected_iff
#check Graph.Contract.Connected.restrict_of_connected_restrict_contract
#check Graph.Contract.Connected.of_contract
#check Graph.Inc.contractFun
#check Graph.Inc.contractFun_validIn
#check Graph.Inc₂.contractFun
#check Graph.Inc₂.contractFun_validIn
#check Graph.Inc₂.contractFun_eq_self_of_not_inc
#check Graph.Inc₂.contractFun_eq_self_iff
#check Graph.Inc₂.vx_mem_contract_iff
#check Graph.IsContraction
-- Operation.Minor2.lean
#check Graph.IsPartitionGraph
#check Graph.Setify
#check Graph.Setify.HasIsom
#check Graph.Setify.IsPartitionGraph
#check Graph.SetContract
#check Graph.SetContract.V
#check Graph.SetContract.E
#check Graph.SetContract.toMultiset
#check Graph.SetContract.Inc
#check Graph.SetContract.Inc₂
#check Graph.SetContract.subset_map
#check Graph.SetContract.map_eq_iff'
#check Graph.SetContract.map_eq_iff
#check Graph.SetContract.map_mem_iff
#check Graph.SetContract.IsPartitionGraph
#check Graph.setContract_edgeDel_comm
#check Graph.SetContract.foo
#check Graph.SetContract.foo2
#check Graph.SetContract.map_map
#check Graph.SetContract.contract_contract
-- WList.Defs.lean
#check WList
#check WList.nil_inj_iff
#check WList.cons_inj_iff
#check WList.first
#check WList.nil_first
#check WList.first_cons
#check WList.last
#check WList.last_cons
#check WList.nil_last
#check WList.vx
#check WList.vx_ne_nil
#check WList.cons_vx
#check WList.nil_vx
#check WList.vx_head
#check WList.vx_getLast
#check WList.vx_length_pos
#check WList.vx_getElem_zero
#check WList.edge
#check WList.nil_edge
#check WList.cons_edge
#check WList.ext_vx_edge
#check WList.Membership
#check WList.mem_vx
#check WList.mem_nil_iff
#check WList.mem_cons_iff
#check WList.eq_or_ne_mem_of_mem_cons
#check WList.first_mem
#check WList.last_mem
#check WList.UniqueMem
#check WList.vxSet
#check WList.edgeSet
#check WList.mem_vxSet_iff
#check WList.mem_edgeSet_iff
#check WList.nil_vxSet
#check WList.nil_edgeSet
#check WList.cons_vxSet
#check WList.vx_nodup_of_cons
#check WList.cons_edgeSet
#check WList.vxSet_nonempty
#check WList.vx_toFinset_toSet
#check WList.Nil
#check WList.nil_nil
#check WList.not_nil_cons
#check WList.Nil.eq_nil_of_mem
#check WList.Nil.eq_nil_first
#check WList.Nil.eq_nil_last
#check WList.Nil.first_eq_last
#check WList.nil_iff_eq_nil
#check WList.first_eq_last_iff
#check WList.instNilDecidable
#check WList.Nonempty
#check WList.cons_nonempty
#check WList.nil_not_nonempty
#check WList.nil_injective
#check WList.not_nonempty_iff
#check WList.not_nil_iff
#check WList.Nonempty.exists_cons
#check WList.nonempty_iff_exists_cons
#check WList.first_ne_last_iff
#check WList.nonempty_or_exists_eq_nil
#check WList.instNonemptyDecidable
#check WList.firstEdge
#check WList.firstEdge_cons
#check WList.firstEdge_mem_edge
#check WList.length
#check WList.length_edge
#check WList.length_vx
#check WList.cons_length
#check WList.nil_length
#check WList.length_eq_zero
#check WList.length_ne_zero_iff
#check WList.length_pos_iff
#check WList.length_eq_succ_iff
#check WList.DInc
#check WList.not_nil_dInc
#check WList.dInc_cons_iff
#check WList.DInc.vx_mem_left
#check WList.DInc.vx_mem_right
#check WList.DInc.edge_mem
#check WList.exists_dInc_of_mem_edge
#check WList.Inc₂
#check WList.Inc₂.not_nil
#check WList.DInc.inc₂
#check WList.Inc₂.symm
#check WList.inc₂_iff_dInc
#check WList.Inc₂.of_cons
#check WList.inc₂_cons_iff'
#check WList.inc₂_cons_iff
#check WList.Inc₂.vx_mem_left
#check WList.Inc₂.vx_mem_right
#check WList.Inc₂.edge_mem
#check WList.exists_inc₂_of_mem_edge
#check WList.WellFormed
#check WList.endsOf
#check WList.get
#check WList.get_nil
#check WList.get_zero
#check WList.get_cons_add
#check WList.get_length
#check WList.get_mem
#check WList.get_of_length_le
#check WList.get_eq_getD_vx
#check WList.idxOf
#check WList.idxOf_nil
#check WList.idxOf_cons
#check WList.idxOf_cons_self
#check WList.idxOf_cons_ne
#check WList.idxOf_not_mem
#check WList.idxOf_mem_le
#check WList.idxOf_le_length_iff_mem
#check WList.idxOf_first
#check WList.idxOf_eq_idxOf_vx
#check WList.get_idxOf
#check WList.idxOf_get
-- WList.Ops.lean
#check WList.concat
#check WList.append
#check WList.instAppend
#check WList.nil_concat
#check WList.cons_concat
#check WList.concat_first
#check WList.concat_last
#check WList.concat_vx
#check WList.concat_edge
#check WList.concat_length
#check WList.mem_concat
#check WList.concat_nonempty
#check WList.get_concat
#check WList.dInc_concat
#check WList.DInc.concat
#check WList.append_notation
#check WList.nil_append
#check WList.cons_append
#check WList.append_assoc
#check WList.append_vx
#check WList.append_vx'
#check WList.concat_eq_append
#check WList.append_edge
#check WList.append_length
#check WList.append_nil
#check WList.append_first_of_eq
#check WList.append_first_of_nonempty
#check WList.append_last
#check WList.append_right_injective
#check WList.append_right_inj_iff
#check WList.append_right_eq_self
#check WList.append_left_eq_self
#check WList.append_eq_nil_iff
#check WList.nil_append_iff
#check WList.eq_append_of_vx_mem
#check WList.eq_append_cons_of_edge_mem
#check WList.reverse
#check WList.reverse_nil
#check WList.reverse_cons
#check WList.reverse_nonempty
#check WList.reverse_first
#check WList.reverse_last
#check WList.reverse_vx
#check WList.reverse_edge
#check WList.reverse_length
#check WList.reverse_append
#check WList.concat_reverse
#check WList.reverse_reverse
#check WList.reverse_inj
#check WList.reverse_inj_iff
#check WList.reverse_eq_comm
#check WList.mem_reverse
#check WList.reverse_vxSet
#check WList.DInc.reverse
#check WList.dInc_reverse_iff
#check WList.inc₂_reverse_iff
#check WList.findD
#check WList.findD_nil
#check WList.findD_cons
#check WList.findD_eq_vx_find?_getD
#check WList.findLastD
#check WList.findLastD_nil
-- WList.Sublist.lean
#check WList.IsSublist
#check WList.nil_isSublist_iff
#check WList.isSublist_nil_iff
#check WList.isSublist_refl
#check WList.IsSublist.vx_sublist
#check WList.IsSublist.mem
#check WList.IsSublist.edge_sublist
#check WList.IsSublist.length_le
#check WList.IsSublist.eq_of_length_ge
#check WList.IsSublist.trans
#check WList.IsSublist.antisymm
#check WList.isSublist_cons_self
#check WList.IsSublist.concat
#check WList.IsSublist.concat₂
#check WList.isSublist_concat_self
#check WList.IsSublist.reverse
#check WList.IsSublist.of_reverse
#check WList.DInc.of_isSublist
#check WList.Inc₂.of_isSublist
#check WList.WellFormed.sublist
#check WList.cons_wellFormed_iff
#check WList.IsPrefix
#check WList.IsPrefix.first_eq
#check WList.IsPrefix.exists_eq_append
#check WList.isPrefix_append_right
#check WList.IsPrefix.isSublist
#check WList.IsPrefix.mem
#check WList.isPrefix_refl
#check WList.isPrefix_nil_iff
#check WList.nil_isPrefix_iff
#check WList.IsPrefix.trans
#check WList.IsPrefix.vx_isPrefix
#check WList.IsPrefix.edge_isPrefix
#check WList.IsPrefix.eq_of_length_ge
#check WList.IsPrefix.length_le
#check WList.IsPrefix.antisymm
#check WList.IsPrefix.concat
#check WList.isPrefix_concat_self
#check WList.IsSuffix
#check WList.IsSuffix.reverse_isPrefix_reverse
#check WList.IsPrefix.reverse_isSuffix_reverse
#check WList.reverse_isPrefix_reverse_iff
#check WList.reverse_isSuffix_reverse_iff
#check WList.isSuffix_refl
#check WList.IsSuffix.isSublist
#check WList.IsSuffix.mem
#check WList.isSuffix_nil_iff
#check WList.nil_isSuffix_iff
#check WList.IsSuffix.last_eq
#check WList.IsSuffix.length_le
#check WList.IsSuffix.trans
#check WList.IsSuffix.eq_of_length_ge
#check WList.IsSuffix.antisymm
#check WList.IsSuffix.cons
#check WList.isSuffix_cons_self
#check WList.isSuffix_append_left
#check WList.prefixUntil
#check WList.prefixUntil_eq_nil
#check WList.prefixUntil_nil
#check WList.prefixUntil_cons
#check WList.prefixUntil_first
#check WList.prefixUntil_prop_last
#check WList.prefixUntil_last_eq_findD
#check WList.prefixUntil_not_prop
#check WList.Nonempty.prefixUntil_nil_iff
#check WList.Nonempty.prefixUntil_nonempty_iff
#check WList.prefixUntil_isPrefix
#check WList.prefixUntilVx
#check WList.prefixUntilVx_isPrefix
#check WList.prefixUntilVx_last
#check WList.prefixUntilVx_first
#check WList.suffixFrom
#check WList.suffixFrom_nil
#check WList.suffixFrom_cons
#check WList.suffixFrom_last
#check WList.suffixFrom_prop_first
#check WList.suffixFrom_first_eq_findD
#check WList.suffixFrom_isSuffix
#check WList.suffixFrom_nil_iff
#check WList.suffixFrom_nonempty_iff
#check WList.suffixFrom_vx_countP
#check WList.suffixFromVx
#check WList.suffixFromVx_first
#check WList.suffixFromVx_isSuffix
#check WList.suffixFromVx_last
#check WList.suffixFromVx_vx_count
#check WList.prefixUntil_append_suffixFrom
#check WList.prefixUntil_last_eq_suffixFrom_first
#check WList.prefixUntilVx_append_suffixFromVx
#check WList.prefixUntilVx_last_eq_suffixFromVx_first
#check WList.prefixUntilLast
#check WList.prefixUntilLast_isPrefix
#check WList.prefixUntilLast_prop_last
#check WList.suffixFromLast
#check WList.suffixFromLast_isSuffix
#check WList.suffixFromLast_prop_first
#check WList.prefixUntilLast_append_suffixFromLast
#check WList.tail
#check WList.tail_nil
#check WList.tail_cons
#check WList.tail_last
#check WList.tail_vx_of_nonempty
#check WList.tail_vx_of_nil
#check WList.tail_vx
#check WList.tail_edge
#check WList.tail_vx_nodup_iff
#check WList.mem_tail_iff_of_nodup
#check WList.tail_vxSet_of_nodup
#check WList.tail_isSuffix
#check WList.eq_first_or_mem_tail
#check WList.mem_iff_eq_first_or_mem_tail
#check WList.tail_concat
#check WList.dropLast
#check WList.dropLast_nil
#check WList.dropLast_cons_nil
#check WList.dropLast_cons_cons
#check WList.reverse_tail
#check WList.reverse_dropLast
#check WList.reverse_dropLast_reverse
#check WList.reverse_tail_reverse
#check WList.dropLast_concat
#check WList.dropLast_first
#check WList.dropLast_vx
#check WList.dropLast_edge
#check WList.mem_iff_eq_mem_dropLast_or_eq_last
#check WList.dropLast_vxSet_of_nodup
#check WList.dropLast_isPrefix
#check WList.dedup
#check WList.dedup_nil
#check WList.dedup_cons_eq_ite
#check WList.dedup_cons_of_mem
#check WList.dedup_cons_of_not_mem
#check WList.dedup_first
#check WList.dedup_last
#check WList.dedup_isSublist
#check WList.dedup_vx_nodup
#check WList.dedup_eq_self
#check WList.dedup_eq_self_iff
#check WList.exists_dInc_prop_not_prop
#check WList.exists_dInc_not_prop_prop
#check WList.splitAtEdge
#check WList.splitAtEdge_nil
#check WList.splitAtEdge_cons
#check WList.splitAtEdge_DInc
#check WList.splitAtEdge_left_prefix
#check WList.splitAtEdge_right_suffix
#check WList.splitAtEdge_not_mem_left_edge
#check WList.splitAtEdge_not_mem_right_edge
-- WList.Cycle.lean
#check WList.IsClosed
#check WList.nil_isClosed
#check WList.cons_isClosed_iff
#check WList.concat_isClosed_iff
#check WList.IsClosed.vxSet_tail
#check WList.IsClosed.reverse
#check WList.reverse_isClosed_iff
#check WList.rotate
#check WList.cons_rotate_one
#check WList.rotate_cons_succ
#check WList.rotate_nil
#check WList.rotate_zero
#check WList.rotate_rotate
#check WList.rotate_succ
#check WList.rotate_nonempty_iff
#check WList.rotate_first
#check WList.rotate_induction
#check WList.IsClosed.rotate
#check WList.rotate_edge
#check WList.rotate_vx_tail
#check WList.IsClosed.rotate_vxSet
#check WList.rotate_edgeSet
#check WList.IsClosed.rotate_length
#check WList.exists_rotate_first_eq
-- Walk.Basic.lean
#check Graph.IsWalk
#check Graph.nil_isWalk_iff
#check Graph.cons_isWalk_iff
#check Graph.IsWalk.of_cons
#check Graph.IsWalk.vx_mem_of_mem
#check Graph.IsWalk.edge_mem_of_mem
#check Graph.IsWalk.vx_mem_of_edge_mem
#check Graph.IsWalk.vxSet_subset
#check Graph.IsWalk.edgeSet_subset
#check Graph.IsWalk.mem_of_mem_edge_of_inc
#check Graph.IsWalk.sublist
#check Graph.IsWalk.prefix
#check Graph.IsWalk.suffix
#check Graph.IsWalk.append
#check Graph.IsWalk.concat
#check Graph.IsWalk.of_append_left
#check Graph.IsWalk.of_append_right
#check Graph.IsWalk.last_eq_first
#check Graph.IsWalk.reverse
#check Graph.isWalk_reverse_iff
#check Graph.IsWalk.of_le
#check Graph.IsWalk.inc₂_of_inc₂
#check Graph.IsWalk.inc₂_of_dInc
#check Graph.IsWalk.wellFormed
#check Graph.IsWalk.le
#check Graph.IsWalk.induce
#check Graph.IsWalk.of_vxDel
#check Graph.IsWalk.vxDel
#check Graph.IsWalk.restrict
#check Graph.IsWalk.edgeDel
#check Graph.IsWalk.of_edgeDel
#check Graph.IsWalk_vxDel
#check Graph.IsWalk_restrict
#check Graph.IsWalk_edgeDel
#check Graph.IsWalk_vxDel_of_not_mem
#check Graph.IsWalk_edgeDel_of_not_mem
#check Graph.IsWalkFrom
#check Graph.isWalkFrom_iff
#check Graph.IsWalkFrom.reverse
#check Graph.IsWalkFrom.of_le
#check Graph.IsWalkFrom.induce
#check Graph.IsWalkFrom.vxDel
#check Graph.IsWalkFrom.of_vxDel
#check Graph.IsWalkFrom.restrict
#check Graph.IsWalkFrom.edgeDel
#check Graph.IsWalkFrom.of_edgeDel
#check Graph.Inc₂.walk
#check Graph.Inc₂.walk_first
#check Graph.Inc₂.walk_last
#check Graph.Inc₂.walk_nonempty
#check Graph.Inc₂.walk_vx
#check Graph.Inc₂.mem_walk_iff
#check Graph.Inc₂.walk_vxSet
#check Graph.Inc₂.walk_edge
#check Graph.Inc₂.walk_edgeSet
#check Graph.Inc₂.walk_length
#check Graph.Inc₂.walk_isWalk
#check Graph.length_eq_one_iff
#check Graph.reflAdj.exists_walk
#check Graph.connected_iff_exists_walk
#check Graph.IsWalk.connected
#check Graph.IsWalkFrom.setConnected
#check Graph.reverse_isWalk_iff
#check Graph.IsWalk.dedup
#check Graph.IsWalk.dropLast
-- Walk.Path.lean
#check Graph.IsTrail
#check Graph.isTrail_iff
#check Graph.IsPath
#check Graph.isPath_iff
#check Graph.IsTrailFrom
#check Graph.isTrailFrom_iff
#check Graph.IsPathFrom
#check Graph.isPathFrom_iff
#check Graph.IsTrailFrom.isTrail
#check Graph.IsTrailFrom.isWalkFrom
#check Graph.IsPathFrom.isPath
#check Graph.IsPathFrom.isWalkFrom
#check Graph.IsWalk.isTrail
#check Graph.IsWalk.isPath
#check Graph.IsWalk.isWalkFrom
#check Graph.IsWalk.isTrailFrom
#check Graph.IsWalk.isPathFrom
#check Graph.IsTrail.isPath
#check Graph.IsTrail.isTrailFrom
#check Graph.IsTrail.isPathFrom
#check Graph.IsPath.isPathFrom
#check Graph.nil_isTrail
#check Graph.nil_isPath
#check Graph.nil_isWalkFrom
#check Graph.nil_isWalkFrom_iff
#check Graph.nil_isTrail_iff
#check Graph.nil_isPath_iff
#check Graph.IsPath.first_eq_last
#check Graph.cons_isTrail
#check Graph.cons_isPath
#check Graph.cons_isTrailFrom
#check Graph.cons_isPathFrom
#check Graph.IsTrail.of_cons
#check Graph.IsPath.of_cons
#check Graph.IsPath.exists_cons
#check Graph.nil_isTrailFrom
#check Graph.nil_isPathFrom
#check Graph.IsPath.isTrail
#check Graph.IsTrail.unique_dInc
#check Graph.IsTrail.eq_of_dInc_dInc
#check Graph.IsTrail.of_le
#check Graph.IsTrail.induce
#check Graph.IsTrail.vxDel
#check Graph.IsTrail.of_vxDel
#check Graph.IsTrail.restrict
#check Graph.IsTrail.edgeDel
#check Graph.IsTrail.of_edgeDel
#check Graph.IsPath.of_le
#check Graph.IsPath.induce
#check Graph.IsPath.vxDel
#check Graph.IsPath.of_vxDel
#check Graph.IsPath.restrict
#check Graph.IsPath.edgeDel
#check Graph.IsPath.of_edgeDel
#check Graph.isPath_vxDel
#check Graph.isPath_edgeDel
#check Graph.IsTrailFrom.of_le
#check Graph.IsTrailFrom.induce
#check Graph.IsTrailFrom.vxDel
#check Graph.IsTrailFrom.of_vxDel
#check Graph.IsTrailFrom.restrict
#check Graph.IsTrailFrom.edgeDel
#check Graph.IsTrailFrom.of_edgeDel
#check Graph.IsPathFrom.of_le
#check Graph.IsPathFrom.induce
#check Graph.IsPathFrom.vxDel
#check Graph.IsPathFrom.of_vxDel
#check Graph.IsPathFrom.restrict
#check Graph.IsPathFrom.edgeDel
#check Graph.IsPathFrom.of_edgeDel
#check Graph.Inc₂.walk_isPath
#check Graph.IsPath.reverse
#check Graph.IsPathFrom.reverse
#check Graph.reverse_isPath_iff
#check Graph.IsWalk.dedup_isPath
#check Graph.IsPath.dropLast_vxSet
#check Graph.IsPath.last_not_mem_dropLast
#check Graph.connected_iff_exists_path
#check Graph.setConnected_iff_exists_pathFrom
-- Walk.Cycle.lean
#check Graph.IsClosedWalk
#check Graph.isClosedWalk_iff
#check Graph.IsTour
#check Graph.isTour_iff
#check Graph.IsCycle
#check Graph.isCycle_iff
#check Graph.IsWalk.isClosedWalk
#check Graph.IsWalk.isTour
#check Graph.IsWalk.isCycle
#check Graph.IsClosedWalk.isCycle
#check Graph.IsClosedWalk.isTour
#check Graph.IsTour.isCycle
#check Graph.nil_isClosedWalk_iff
#check Graph.nil_isTour_iff
#check Graph.nil_not_isCycle
#check Graph.cons_isClosedWalk
#check Graph.cons_isTour
#check Graph.IsClosedWalk.of_le
#check Graph.IsClosedWalk.induce
#check Graph.IsClosedWalk.of_vxDel
#check Graph.IsClosedWalk.vxDel
#check Graph.IsClosedWalk.restrict
#check Graph.IsClosedWalk.edgeDel
#check Graph.IsClosedWalk.of_edgeDel
#check Graph.IsClosedWalk_vxDel
#check Graph.IsClosedWalk_restrict
#check Graph.IsClosedWalk_edgeDel
#check Graph.IsTour.of_le
#check Graph.IsTour.induce
#check Graph.IsTour.of_vxDel
#check Graph.IsTour.vxDel
#check Graph.IsTour.restrict
#check Graph.IsTour.edgeDel
#check Graph.IsTour.of_edgeDel
#check Graph.IsTour_vxDel
#check Graph.IsTour_restrict
#check Graph.IsTour_edgeDel
#check Graph.IsCycle.of_le
#check Graph.IsCycle.induce
#check Graph.IsCycle.of_vxDel
#check Graph.IsCycle.vxDel
#check Graph.IsCycle.restrict
#check Graph.IsCycle.edgeDel
#check Graph.IsCycle.of_edgeDel
#check Graph.IsCycle_vxDel
#check Graph.IsCycle_restrict
#check Graph.IsCycle_edgeDel
#check Graph.IsWalk.isCycle_of_length
#check Graph.Inc₂.walk_isCycle
#check Graph.IsCycle.tail_isPath
#check Graph.Inc₂.backtrack
#check Graph.Inc₂.backtrack_first
#check Graph.Inc₂.backtrack_last
#check Graph.Inc₂.backtrack_nonempty
#check Graph.Inc₂.backtrack_vx
#check Graph.Inc₂.mem_backtrack_iff
#check Graph.Inc₂.backtrack_vxSet
#check Graph.Inc₂.backtrack_edge
#check Graph.Inc₂.backtrack_edgeSet
#check Graph.Inc₂.backtrack_length
#check Graph.Inc₂.backtrack_isWalk
